openapi: 3.0.3
info:
  title: Golden Diamond Investment Admin API
  description: |
    Comprehensive Admin API for the Golden Diamond Investment platform.
    
    This API provides endpoints for administrative operations including:
    - Investment plan management with filtering, search, and pagination
    - Card management and tracking
    - Transaction monitoring and processing
    - Income and commission analytics
    - Referral system management
    - Staff role management
    - System settings configuration
    - Support and audit operations
    - Dashboard analytics and statistics
    - Payment processing and reconciliation
    
    ## Testing Mode (Current)
    **IMPORTANT**: Authentication is currently DISABLED for testing purposes.
    
    - All authentication and role checks are commented out
    - APIs use Supabase Service Role Key for full database access
    - No authentication headers required for testing
    - Mock user objects are used where user context is needed
    
    ## Authentication (When Re-enabled)
    When authentication is re-enabled, all admin endpoints will require:
    - **SuperAdmin**: Full access to all endpoints
    - **Admin**: Access to most endpoints except sensitive system operations
    - **Support**: Read access and limited write access for support operations
    - **Payments**: Access to payment and transaction related endpoints
    
    ## Required Environment Variables
    ```
    SUPABASE_SERVICE_ROLE_KEY=your_service_role_key_here
    NEXT_PUBLIC_SUPABASE_URL=your_supabase_url_here
    NEXT_PUBLIC_SUPABASE_ANON_KEY=your_anon_key_here
    ```
    
    ## Rate Limiting
    - Admin operations: 100 requests per minute
    - Data export operations: 10 requests per hour
    - Bulk operations: 20 requests per minute
    
  version: 1.0.0
  contact:
    name: Admin API Support
    email: admin-support@akshayapatra.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:3000
    description: Development server
  - url: https://your-production-domain.com
    description: Production server

tags:
  - name: Dashboard
    description: Dashboard analytics and overview operations
  - name: User Management
    description: User administration and management operations
  - name: Card Management
    description: Card administration and tracking operations
  - name: Transaction Management
    description: Transaction monitoring and processing operations
  - name: Income Analytics
    description: Income and commission tracking operations
  - name: Referral Management
    description: Referral system administration operations
  - name: Staff Management
    description: Staff role and permission management operations
  - name: System Settings
    description: System configuration and settings operations
  - name: Support & Audit
    description: Support tickets and audit log operations
  - name: Payment Processing
    description: Payment processing and reconciliation operations

# security:
#   - BearerAuth: []
# Authentication disabled for testing - remove comments when re-enabling auth

paths:
  # Dashboard APIs
  /api/admin/dashboard:
    get:
      tags:
        - Dashboard
      summary: Get dashboard overview
      description: Retrieve comprehensive dashboard statistics and metrics
      parameters:
        - name: period
          in: query
          description: Time period for statistics
          schema:
            type: string
            enum: [day, week, month, year]
            default: month
      responses:
        '200':
          description: Dashboard data retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DashboardResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'
    
    post:
      tags:
        - Dashboard
      summary: Quick search
      description: Search across users, cards, and transactions
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - query
              properties:
                query:
                  type: string
                  minLength: 2
                  description: Search query (minimum 2 characters)
                searchType:
                  type: string
                  enum: [users, cards, transactions]
                  description: Limit search to specific type
      responses:
        '200':
          description: Search results
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchResponse'

  # User Management APIs
  /api/admin/users:
    get:
      tags:
        - User Management
      summary: Get users list
      description: Retrieve paginated list of users with filtering and search
      parameters:
        - $ref: '#/components/parameters/SearchParam'
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/LimitParam'
        - $ref: '#/components/parameters/SortByParam'
        - $ref: '#/components/parameters/SortOrderParam'
        - name: status
          in: query
          description: Filter by user status
          schema:
            type: string
            enum: [active, inactive, suspended]
        - name: kyc_verified
          in: query
          description: Filter by KYC verification status
          schema:
            type: boolean
        - name: role
          in: query
          description: Filter by user role
          schema:
            type: string
        - name: date_from
          in: query
          description: Filter by creation date (from)
          schema:
            type: string
            format: date-time
        - name: date_to
          in: query
          description: Filter by creation date (to)
          schema:
            type: string
            format: date-time
      responses:
        '200':
          description: Users retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsersResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
    
    post:
      tags:
        - User Management
      summary: Create new user
      description: Create a new user account (Admin only)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateUserResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '409':
          $ref: '#/components/responses/Conflict'

  /api/admin/users/{id}:
    get:
      tags:
        - User Management
      summary: Get user details
      description: Retrieve detailed user information including cards, transactions, and statistics
      parameters:
        - $ref: '#/components/parameters/UserIdParam'
      responses:
        '200':
          description: User details retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDetailsResponse'
        '404':
          $ref: '#/components/responses/NotFound'
    
    put:
      tags:
        - User Management
      summary: Update user
      description: Update user information (Admin only)
      parameters:
        - $ref: '#/components/parameters/UserIdParam'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserRequest'
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateUserResponse'
    
    delete:
      tags:
        - User Management
      summary: Delete/deactivate user
      description: Soft delete user by deactivating (SuperAdmin only)
      parameters:
        - $ref: '#/components/parameters/UserIdParam'
      responses:
        '200':
          description: User deactivated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'

  /api/admin/users/ban:
    post:
      tags:
        - User Management
      summary: Ban or unban user
      description: |
        Ban or unban a user using Supabase Auth Admin API.
        
        **Testing Mode**: No authentication required.
        
        Actions:
        - `ban`: Ban user with specified duration
        - `unban`: Remove ban from user
        
        Uses Supabase `auth.admin.updateUserById()` with service role key.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - action
                - user_id
              properties:
                action:
                  type: string
                  enum: [ban, unban]
                  description: Action to perform
                user_id:
                  type: string
                  format: uuid
                  description: UUID of user to ban/unban
                duration:
                  type: string
                  default: "876600h"
                  description: Ban duration (required for ban action). Use "876600h" for permanent ban
                  example: "876600h"
                reason:
                  type: string
                  description: Reason for ban/unban (optional)
                  example: "Violation of terms of service"
            examples:
              ban_user:
                summary: Ban user permanently
                value:
                  action: "ban"
                  user_id: "550e8400-e29b-41d4-a716-446655440000"
                  duration: "876600h"
                  reason: "Multiple policy violations"
              unban_user:
                summary: Unban user
                value:
                  action: "unban"
                  user_id: "550e8400-e29b-41d4-a716-446655440000"
                  reason: "Appeal approved"
      responses:
        '200':
          description: User ban/unban operation successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "User banned successfully"
                  data:
                    type: object
                    properties:
                      user_id:
                        type: string
                        format: uuid
                      action:
                        type: string
                        enum: [ban, unban]
                      auth_result:
                        type: object
                        description: Result from Supabase auth.admin API
                      profile_updated:
                        type: boolean
                        description: Whether user profile was updated
                      audit_logged:
                        type: boolean
                        description: Whether action was logged for audit
        '400':
          description: Bad request - invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                missing_action:
                  summary: Missing required action
                  value:
                    success: false
                    error: "Missing required fields: action, user_id"
                invalid_action:
                  summary: Invalid action
                  value:
                    success: false
                    error: "Invalid action. Must be 'ban' or 'unban'"
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                error: "User not found"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                auth_error:
                  summary: Supabase auth error
                  value:
                    success: false
                    error: "Failed to ban user via auth system"
                    details: "Auth operation failed"
                database_error:
                  summary: Database error
                  value:
                    success: false
                    error: "Failed to update user profile"

  # Card Management APIs
  /api/admin/cards:
    get:
      tags:
        - Card Management
      summary: Get cards list
      description: Retrieve paginated list of cards with comprehensive filtering
      parameters:
        - $ref: '#/components/parameters/SearchParam'
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/LimitParam'
        - $ref: '#/components/parameters/SortByParam'
        - $ref: '#/components/parameters/SortOrderParam'
        - name: status
          in: query
          description: Filter by card status
          schema:
            type: string
            enum: [active, inactive, suspended]
        - name: user_id
          in: query
          description: Filter by user ID
          schema:
            type: string
            format: uuid
        - name: referral_code
          in: query
          description: Filter by referral code
          schema:
            type: string
        - name: has_subscriptions
          in: query
          description: Filter by subscription status
          schema:
            type: boolean
        - name: min_balance
          in: query
          description: Minimum wallet balance filter
          schema:
            type: number
        - name: max_balance
          in: query
          description: Maximum wallet balance filter
          schema:
            type: number
      responses:
        '200':
          description: Cards retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardsResponse'
    
    post:
      tags:
        - Card Management
      summary: Create new card
      description: Create a new card (Admin only)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCardRequest'
      responses:
        '201':
          description: Card created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateCardResponse'

  /api/admin/cards/{id}:
    get:
      tags:
        - Card Management
      summary: Get card details
      description: Retrieve detailed card information including subscriptions and referral tree
      parameters:
        - name: id
          in: path
          required: true
          description: Card ID
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Card details retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardDetailsResponse'
    
    put:
      tags:
        - Card Management
      summary: Update card
      description: Update card information or suspend/unsuspend (Admin only)
      parameters:
        - name: id
          in: path
          required: true
          description: Card ID
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCardRequest'
      responses:
        '200':
          description: Card updated successfully
    
    delete:
      tags:
        - Card Management
      summary: Delete/deactivate card
      description: Soft delete card by deactivating (SuperAdmin only)
      parameters:
        - name: id
          in: path
          required: true
          description: Card ID
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Card deactivated successfully

  # Transaction Management APIs
  /api/admin/transactions:
    get:
      tags:
        - Transaction Management
      summary: Get transactions list
      description: Retrieve paginated transaction list with advanced filtering
      parameters:
        - $ref: '#/components/parameters/SearchParam'
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/LimitParam'
        - name: transaction_type
          in: query
          description: Filter by transaction types (comma-separated)
          schema:
            type: string
            example: "subscription_payment,commission_earning"
        - name: status
          in: query
          description: Filter by statuses (comma-separated)
          schema:
            type: string
            example: "completed,pending"
        - name: payment_method
          in: query
          description: Filter by payment methods (comma-separated)
          schema:
            type: string
        - name: card_id
          in: query
          description: Filter by card ID
          schema:
            type: string
            format: uuid
        - name: scheme_id
          in: query
          description: Filter by scheme ID
          schema:
            type: string
            format: uuid
        - name: amount_min
          in: query
          description: Minimum amount filter
          schema:
            type: number
        - name: amount_max
          in: query
          description: Maximum amount filter
          schema:
            type: number
      responses:
        '200':
          description: Transactions retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionsResponse'
    
    post:
      tags:
        - Transaction Management
      summary: Create new transaction
      description: Create a new transaction (Admin/Payments only)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTransactionRequest'
      responses:
        '201':
          description: Transaction created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateTransactionResponse'

  # Income Analytics APIs
  /api/admin/income:
    get:
      tags:
        - Income Analytics
      summary: Get income analytics
      description: Retrieve comprehensive income analytics and breakdowns
      parameters:
        - name: date_from
          in: query
          description: Income period start
          schema:
            type: string
            format: date-time
        - name: date_to
          in: query
          description: Income period end
          schema:
            type: string
            format: date-time
        - name: income_type
          in: query
          description: Type of income to analyze
          schema:
            type: string
            enum: [direct, indirect, commission, subscription]
        - name: payment_method
          in: query
          description: Payment methods filter (comma-separated)
          schema:
            type: string
        - name: scheme_id
          in: query
          description: Filter by scheme
          schema:
            type: string
            format: uuid
        - name: period
          in: query
          description: Analysis period
          schema:
            type: string
            enum: [daily, weekly, monthly, yearly]
            default: monthly
      responses:
        '200':
          description: Income analytics retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IncomeAnalyticsResponse'
    
    post:
      tags:
        - Income Analytics
      summary: Generate income reports
      description: Generate detailed income reports (Admin only)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GenerateReportRequest'
      responses:
        '200':
          description: Report generated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReportResponse'

  # Referral Management APIs
  /api/admin/referrals:
    get:
      tags:
        - Referral Management
      summary: Get referral data
      description: Retrieve referral tree data with statistics
      parameters:
        - $ref: '#/components/parameters/SearchParam'
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/LimitParam'
        - name: referral_level
          in: query
          description: Filter by referral levels (comma-separated, 1-7)
          schema:
            type: string
            example: "1,2,3"
        - name: status
          in: query
          description: Filter by referral status
          schema:
            type: string
            enum: [active, inactive]
        - name: card_id
          in: query
          description: Filter by specific card
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Referral data retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReferralsResponse'
    
    post:
      tags:
        - Referral Management
      summary: Get referral tree
      description: Get complete referral tree for a specific card
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - action
                - card_id
              properties:
                action:
                  type: string
                  enum: [get_tree]
                card_id:
                  type: string
                  format: uuid
                max_levels:
                  type: integer
                  minimum: 1
                  maximum: 7
                  default: 7
      responses:
        '200':
          description: Referral tree retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReferralTreeResponse'

  # Staff Management APIs
  /api/admin/staff:
    get:
      tags:
        - Staff Management
      summary: Get staff members
      description: Retrieve staff members with role information (Admin only)
      parameters:
        - $ref: '#/components/parameters/SearchParam'
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/LimitParam'
        - name: role
          in: query
          description: Filter by roles (comma-separated)
          schema:
            type: string
        - name: is_active
          in: query
          description: Filter by active status
          schema:
            type: boolean
      responses:
        '200':
          description: Staff members retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StaffResponse'
    
    post:
      tags:
        - Staff Management
      summary: Manage staff roles
      description: Assign, remove, or create staff roles (Admin only)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/AssignRoleRequest'
                - $ref: '#/components/schemas/RemoveRoleRequest'
                - $ref: '#/components/schemas/CreateRoleRequest'
      responses:
        '200':
          description: Staff role operation successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'

  # System Settings APIs
  /api/admin/settings:
    get:
      tags:
        - System Settings
      summary: Get system settings
      description: Retrieve system configuration and settings (Admin only)
      parameters:
        - name: category
          in: query
          description: Filter by settings category
          schema:
            type: string
      responses:
        '200':
          description: Settings retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SettingsResponse'
    
    post:
      tags:
        - System Settings
      summary: Update system settings
      description: Update system settings and configurations (Admin only)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/UpdateSettingRequest'
                - $ref: '#/components/schemas/UpdateReferralLevelsRequest'
                - $ref: '#/components/schemas/CreateRoleRequest'
                - $ref: '#/components/schemas/UpdateRoleRequest'
      responses:
        '200':
          description: Settings updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'

  # Support & Audit APIs
  /api/admin/support:
    get:
      tags:
        - Support & Audit
      summary: Get support data
      description: Retrieve support tickets, audit logs, or system logs
      parameters:
        - name: endpoint
          in: query
          description: Type of data to retrieve
          schema:
            type: string
            enum: [tickets, audit_logs, system_logs]
            default: tickets
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/LimitParam'
        - name: entity_type
          in: query
          description: Filter audit logs by entity type
          schema:
            type: string
        - name: action
          in: query
          description: Filter audit logs by action
          schema:
            type: string
        - name: user_id
          in: query
          description: Filter by user ID
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Support data retrieved successfully
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/SupportTicketsResponse'
                  - $ref: '#/components/schemas/AuditLogsResponse'
                  - $ref: '#/components/schemas/SystemLogsResponse'
    
    post:
      tags:
        - Support & Audit
      summary: Manage support operations
      description: Create audit logs, update tickets, or export data
      requestBody:
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/CreateAuditLogRequest'
                - $ref: '#/components/schemas/UpdateTicketRequest'
                - $ref: '#/components/schemas/ExportDataRequest'
      responses:
        '200':
          description: Support operation successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'

  # Payment Processing APIs
  /api/admin/payments:
    post:
      tags:
        - Payment Processing
      summary: Process payments
      description: Process invoice payments or bulk payments (Payments role required)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/MarkInvoicePaidRequest'
                - $ref: '#/components/schemas/BulkMarkPaymentsRequest'
      responses:
        '200':
          description: Payment processed successfully
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/PaymentResponse'
                  - $ref: '#/components/schemas/BulkPaymentResponse'

components:
  # securitySchemes:
  #   BearerAuth:
  #     type: http
  #     scheme: bearer
  #     bearerFormat: JWT
  #     description: Supabase JWT token
  # 
  # Authentication disabled for testing - APIs use service key internally
  # Remove comments when re-enabling authentication

  parameters:
    SearchParam:
      name: search
      in: query
      description: Search query
      schema:
        type: string
        minLength: 2
    
    PageParam:
      name: page
      in: query
      description: Page number (1-based)
      schema:
        type: integer
        minimum: 1
        default: 1
    
    LimitParam:
      name: limit
      in: query
      description: Items per page (max 100)
      schema:
        type: integer
        minimum: 1
        maximum: 100
        default: 10
    
    SortByParam:
      name: sort_by
      in: query
      description: Field to sort by
      schema:
        type: string
        default: created_at
    
    SortOrderParam:
      name: sort_order
      in: query
      description: Sort order
      schema:
        type: string
        enum: [asc, desc]
        default: desc
    
    UserIdParam:
      name: id
      in: path
      required: true
      description: User ID
      schema:
        type: string
        format: uuid

  schemas:
    # Common Response Schemas
    SuccessResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: "Operation completed successfully"
        data:
          type: object
          description: Optional response data

    ErrorResponse:
      type: object
      properties:
        success:
          type: boolean
          example: false
        error:
          type: string
          description: Error message
        details:
          type: string
          description: Additional error details

    PaginationMeta:
      type: object
      properties:
        page:
          type: integer
          example: 1
        limit:
          type: integer
          example: 10
        total:
          type: integer
          example: 100
        totalPages:
          type: integer
          example: 10
        hasNext:
          type: boolean
          example: true
        hasPrev:
          type: boolean
          example: false

    # Dashboard Schemas
    DashboardResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        data:
          type: object
          properties:
            period:
              type: object
              properties:
                current:
                  type: object
                  properties:
                    start:
                      type: string
                      format: date-time
                    end:
                      type: string
                      format: date-time
            metrics:
              type: object
              properties:
                users:
                  type: object
                  properties:
                    total:
                      type: integer
                    new:
                      type: integer
                    active:
                      type: integer
                    growth:
                      type: number
                income:
                  type: object
                  properties:
                    total:
                      type: number
                    subscription:
                      type: number
                    commission:
                      type: number
                    growth:
                      type: number
                transactions:
                  type: object
                  properties:
                    total:
                      type: integer
                    successful:
                      type: integer
                    failed:
                      type: integer
                    successRate:
                      type: number
                referrals:
                  type: object
                  properties:
                    total:
                      type: integer
                    direct:
                      type: integer
                    indirect:
                      type: integer
                    conversionRate:
                      type: number

    SearchResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        query:
          type: string
        results:
          type: array
          items:
            type: object
            properties:
              type:
                type: string
                enum: [users, cards, transactions]
              results:
                type: array
                items:
                  type: object

    # User Management Schemas
    UsersResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        data:
          type: array
          items:
            $ref: '#/components/schemas/UserSummary'
        pagination:
          $ref: '#/components/schemas/PaginationMeta'
        filters:
          type: object
        stats:
          type: object

    UserSummary:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        phone:
          type: string
        phoneVerified:
          type: boolean
        location:
          type: string
        kycStatus:
          type: string
          enum: [Verified, Pending]
        status:
          type: string
          enum: [Active, Inactive]
        roles:
          type: array
          items:
            type: string
        totalCards:
          type: integer
        activeCards:
          type: integer
        totalWalletBalance:
          type: number
        commissionWalletBalance:
          type: number
        createdAt:
          type: string
          format: date-time

    CreateUserRequest:
      type: object
      required:
        - full_name
        - phone_number
      properties:
        full_name:
          type: string
          example: "John Doe"
        phone_number:
          type: string
          example: "+1234567890"
        country:
          type: string
          default: "India"
        state:
          type: string
        district:
          type: string
        street_address:
          type: string
        postal_code:
          type: string
        role_name:
          type: string
          example: "support"
        is_active:
          type: boolean
          default: true

    CreateUserResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        data:
          $ref: '#/components/schemas/UserSummary'
        message:
          type: string

    UserDetailsResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        data:
          type: object
          properties:
            id:
              type: string
              format: uuid
            fullName:
              type: string
            phoneNumber:
              type: string
            email:
              type: string
            address:
              type: object
            bankDetails:
              type: object
            kyc:
              type: object
            roles:
              type: array
              items:
                type: object
            cards:
              type: array
              items:
                type: object
            stats:
              type: object
            recentTransactions:
              type: array
              items:
                type: object

    UpdateUserRequest:
      type: object
      properties:
        full_name:
          type: string
        phone_number:
          type: string
        country:
          type: string
        state:
          type: string
        district:
          type: string
        is_active:
          type: boolean
        kyc_verified:
          type: boolean
        roles:
          type: array
          items:
            type: string

    UpdateUserResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        data:
          type: object
        message:
          type: string

    # Card Management Schemas
    CardsResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        data:
          type: array
          items:
            $ref: '#/components/schemas/CardSummary'
        pagination:
          $ref: '#/components/schemas/PaginationMeta'
        filters:
          type: object
        stats:
          type: object

    CardSummary:
      type: object
      properties:
        id:
          type: string
          format: uuid
        cardName:
          type: string
        cardholderName:
          type: string
        phoneNumber:
          type: string
        referralCode:
          type: string
        user:
          type: object
          properties:
            id:
              type: string
              format: uuid
            fullName:
              type: string
            phoneNumber:
              type: string
            kycVerified:
              type: boolean
        referringCard:
          type: object
          nullable: true
        totalWalletBalance:
          type: number
        commissionWalletBalance:
          type: number
        isActive:
          type: boolean
        activeSubscriptions:
          type: integer
        totalSubscriptions:
          type: integer
        directReferrals:
          type: integer
        totalReferrals:
          type: integer
        createdAt:
          type: string
          format: date-time

    CreateCardRequest:
      type: object
      required:
        - user_id
        - card_name
        - cardholder_name
        - phone_number
      properties:
        user_id:
          type: string
          format: uuid
        card_name:
          type: string
        cardholder_name:
          type: string
        phone_number:
          type: string
        referring_referral_code:
          type: string
          description: Referral code of the referring card
        initial_balance:
          type: number
          default: 0
        is_active:
          type: boolean
          default: true

    CreateCardResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        data:
          type: object
          properties:
            id:
              type: string
              format: uuid
            cardName:
              type: string
            cardholderName:
              type: string
            phoneNumber:
              type: string
            referralCode:
              type: string
            totalWalletBalance:
              type: number
            commissionWalletBalance:
              type: number
            isActive:
              type: boolean
            createdAt:
              type: string
              format: date-time
        message:
          type: string

    CardDetailsResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        data:
          type: object
          properties:
            id:
              type: string
              format: uuid
            cardName:
              type: string
            cardholderName:
              type: string
            phoneNumber:
              type: string
            referralCode:
              type: string
            user:
              type: object
            referringCard:
              type: object
              nullable: true
            totalWalletBalance:
              type: number
            commissionWalletBalance:
              type: number
            isActive:
              type: boolean
            subscriptions:
              type: array
              items:
                type: object
            upline:
              type: array
              items:
                type: object
            downline:
              type: array
              items:
                type: object
            stats:
              type: object
            recentTransactions:
              type: array
              items:
                type: object

    UpdateCardRequest:
      type: object
      properties:
        card_name:
          type: string
        cardholder_name:
          type: string
        phone_number:
          type: string
        is_active:
          type: boolean
        suspend:
          type: boolean
          description: Whether to suspend the card
        suspension_reason:
          type: string
          description: Reason for suspension (required if suspend=true)

    # Transaction Management Schemas
    TransactionsResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        data:
          type: array
          items:
            $ref: '#/components/schemas/TransactionSummary'
        pagination:
          $ref: '#/components/schemas/PaginationMeta'
        filters:
          type: object
        stats:
          type: object

    TransactionSummary:
      type: object
      properties:
        id:
          type: string
          format: uuid
        transactionType:
          type: string
          enum: [subscription_payment, commission_earning, bonus_credit, withdrawal, refund, penalty]
        amount:
          type: number
        currency:
          type: string
          default: INR
        status:
          type: string
          enum: [pending, processing, completed, failed, cancelled, expired]
        gatewayTransactionId:
          type: string
        gatewayPaymentId:
          type: string
        paymentMethod:
          type: string
        failureReason:
          type: string
          nullable: true
        card:
          type: object
          nullable: true
        scheme:
          type: object
          nullable: true
        invoice:
          type: object
          nullable: true
        createdAt:
          type: string
          format: date-time

    CreateTransactionRequest:
      type: object
      required:
        - card_id
        - transaction_type
        - amount
        - description
      properties:
        card_id:
          type: string
          format: uuid
        transaction_type:
          type: string
          enum: [subscription_payment, commission_earning, bonus_credit, withdrawal, refund, penalty]
        amount:
          type: number
          minimum: 0.01
        description:
          type: string
        invoice_id:
          type: string
          format: uuid
          description: Required for subscription_payment
        scheme_id:
          type: string
          format: uuid
        currency:
          type: string
          default: INR
        status:
          type: string
          default: pending
        payment_method:
          type: string
        gateway_transaction_id:
          type: string
        gateway_payment_id:
          type: string
        reference_id:
          type: string
        metadata:
          type: object
        scheduled_for:
          type: string
          format: date-time

    CreateTransactionResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        data:
          type: object
          properties:
            id:
              type: string
              format: uuid
            transactionType:
              type: string
            amount:
              type: number
            currency:
              type: string
            status:
              type: string
            description:
              type: string
            createdAt:
              type: string
              format: date-time
        message:
          type: string

    # Income Analytics Schemas
    IncomeAnalyticsResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        data:
          type: object
          properties:
            summary:
              type: object
              properties:
                totalIncome:
                  type: number
                totalSubscriptionIncome:
                  type: number
                totalCommissionIncome:
                  type: number
                incomeGrowthPercentage:
                  type: number
                period:
                  type: object
            subscriptionIncome:
              type: array
              items:
                type: object
            commissionIncome:
              type: array
              items:
                type: object
            paymentMethodBreakdown:
              type: array
              items:
                type: object
            schemeBreakdown:
              type: array
              items:
                type: object
            trends:
              type: array
              items:
                type: object
            recentHighValueTransactions:
              type: array
              items:
                type: object

    GenerateReportRequest:
      type: object
      required:
        - reportType
        - dateFrom
        - dateTo
      properties:
        reportType:
          type: string
          enum: [detailed_income, commission_breakdown, payment_method_analysis]
        dateFrom:
          type: string
          format: date-time
        dateTo:
          type: string
          format: date-time
        filters:
          type: object

    ReportResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        data:
          type: array
          items:
            type: object
        reportType:
          type: string
        generatedAt:
          type: string
          format: date-time
        parameters:
          type: object

    # Referral Management Schemas
    ReferralsResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        data:
          type: array
          items:
            $ref: '#/components/schemas/ReferralSummary'
        pagination:
          $ref: '#/components/schemas/PaginationMeta'
        statistics:
          type: object
          properties:
            referralStats:
              type: object
            topReferrers:
              type: array
              items:
                type: object
            commissionByLevel:
              type: array
              items:
                type: object

    ReferralSummary:
      type: object
      properties:
        id:
          type: string
          format: uuid
        level:
          type: integer
          minimum: 1
          maximum: 7
        commissionRate:
          type: number
        createdAt:
          type: string
          format: date-time
        referredCard:
          type: object
          properties:
            id:
              type: string
              format: uuid
            cardName:
              type: string
            cardholderName:
              type: string
            referralCode:
              type: string
            isActive:
              type: boolean
            user:
              type: object
        referringCard:
          type: object
          properties:
            id:
              type: string
              format: uuid
            cardName:
              type: string
            cardholderName:
              type: string
            referralCode:
              type: string
            isActive:
              type: boolean
            user:
              type: object

    ReferralTreeResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        data:
          type: object
          properties:
            referralTree:
              type: array
              items:
                type: object
                properties:
                  card_id:
                    type: string
                    format: uuid
                  card_name:
                    type: string
                  cardholder_name:
                    type: string
                  referral_code:
                    type: string
                  level:
                    type: integer
                  commission_rate:
                    type: number
                  parent_card_id:
                    type: string
                    format: uuid
                    nullable: true
                  total_earnings:
                    type: number
                  direct_referrals:
                    type: integer
                  is_active:
                    type: boolean
            commissionEarnings:
              type: array
              items:
                type: object

    # Staff Management Schemas
    StaffResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        data:
          type: array
          items:
            $ref: '#/components/schemas/StaffMember'
        pagination:
          $ref: '#/components/schemas/PaginationMeta'
        metadata:
          type: object
          properties:
            availableRoles:
              type: array
              items:
                type: object
            stats:
              type: object

    StaffMember:
      type: object
      properties:
        id:
          type: string
          format: uuid
        fullName:
          type: string
        phoneNumber:
          type: string
        email:
          type: string
        profileImageUrl:
          type: string
          nullable: true
        isActive:
          type: boolean
        roles:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
                format: uuid
              roleName:
                type: string
              displayName:
                type: string
              description:
                type: string
              hierarchyLevel:
                type: integer
              permissions:
                type: array
                items:
                  type: string
              assignedAt:
                type: string
                format: date-time
              isActive:
                type: boolean
        primaryRole:
          type: object
          nullable: true
        createdAt:
          type: string
          format: date-time

    AssignRoleRequest:
      type: object
      required:
        - action
        - user_id
        - role_name
      properties:
        action:
          type: string
          enum: [assign_role]
        user_id:
          type: string
          format: uuid
        role_name:
          type: string
          example: "support"
        expires_at:
          type: string
          format: date-time

    RemoveRoleRequest:
      type: object
      required:
        - action
        - user_id
        - role_id
      properties:
        action:
          type: string
          enum: [remove_role]
        user_id:
          type: string
          format: uuid
        role_id:
          type: string
          format: uuid

    CreateRoleRequest:
      type: object
      required:
        - action
        - name
        - display_name
        - hierarchy_level
      properties:
        action:
          type: string
          enum: [create_role]
        name:
          type: string
          example: "custom_support"
        display_name:
          type: string
          example: "Custom Support Role"
        description:
          type: string
        hierarchy_level:
          type: integer
          minimum: 1
          maximum: 99
        permissions:
          type: array
          items:
            type: string

    # System Settings Schemas
    SettingsResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        data:
          type: object
          properties:
            settings:
              type: object
              additionalProperties:
                type: array
                items:
                  type: object
            categories:
              type: array
              items:
                type: string
            referralLevels:
              type: array
              items:
                type: object
                properties:
                  id:
                    type: string
                    format: uuid
                  level:
                    type: integer
                    minimum: 1
                    maximum: 7
                  commission_percentage:
                    type: number
                    minimum: 0
                    maximum: 100
                  is_active:
                    type: boolean
            roles:
              type: array
              items:
                type: object

    UpdateSettingRequest:
      type: object
      required:
        - action
        - key
        - value
      properties:
        action:
          type: string
          enum: [update_setting]
        key:
          type: string
          example: "max_referral_levels"
        value:
          oneOf:
            - type: string
            - type: number
            - type: boolean
            - type: object
            - type: array
        data_type:
          type: string
          enum: [string, number, boolean, object, array]
          default: string
        description:
          type: string
        category:
          type: string
          default: general
        is_public:
          type: boolean
          default: false
        validation_rules:
          type: object

    UpdateReferralLevelsRequest:
      type: object
      required:
        - action
        - levels
      properties:
        action:
          type: string
          enum: [update_referral_levels]
        levels:
          type: array
          items:
            type: object
            required:
              - level
              - commission_percentage
            properties:
              level:
                type: integer
                minimum: 1
                maximum: 7
              commission_percentage:
                type: number
                minimum: 0
                maximum: 100
              is_active:
                type: boolean
                default: true

    UpdateRoleRequest:
      type: object
      required:
        - action
        - role_id
      properties:
        action:
          type: string
          enum: [update_role]
        role_id:
          type: string
          format: uuid
        display_name:
          type: string
        description:
          type: string
        permissions:
          type: array
          items:
            type: string
        is_active:
          type: boolean

    # Support & Audit Schemas
    SupportTicketsResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        data:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
              ticketNumber:
                type: string
              title:
                type: string
              description:
                type: string
              status:
                type: string
                enum: [Open, In Progress, Resolved, Closed]
              priority:
                type: string
                enum: [Low, Medium, High, Critical]
              category:
                type: string
              submittedBy:
                type: string
              assignedTo:
                type: string
              channel:
                type: string
                enum: [WhatsApp, Live Chat, Phone, Email]
              createdAt:
                type: string
                format: date-time
              updatedAt:
                type: string
                format: date-time
        stats:
          type: object

    AuditLogsResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        data:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
                format: uuid
              entityType:
                type: string
              entityId:
                type: string
                format: uuid
              action:
                type: string
              oldValues:
                type: object
              newValues:
                type: object
              changedFields:
                type: array
                items:
                  type: string
              user:
                type: object
                properties:
                  id:
                    type: string
                    format: uuid
                  fullName:
                    type: string
                  role:
                    type: string
              ipAddress:
                type: string
              userAgent:
                type: string
              metadata:
                type: object
              createdAt:
                type: string
                format: date-time
        pagination:
          $ref: '#/components/schemas/PaginationMeta'

    SystemLogsResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        data:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
              level:
                type: string
                enum: [ERROR, WARNING, INFO, DEBUG]
              message:
                type: string
              source:
                type: string
              timestamp:
                type: string
                format: date-time
              details:
                type: object

    CreateAuditLogRequest:
      type: object
      required:
        - action
        - entity_type
        - entity_id
        - action_type
      properties:
        action:
          type: string
          enum: [create_audit_log]
        entity_type:
          type: string
          example: "user_profiles"
        entity_id:
          type: string
          format: uuid
        action_type:
          type: string
          example: "update"
        old_values:
          type: object
        new_values:
          type: object
        changed_fields:
          type: array
          items:
            type: string
        metadata:
          type: object

    UpdateTicketRequest:
      type: object
      required:
        - action
        - ticket_id
      properties:
        action:
          type: string
          enum: [update_ticket]
        ticket_id:
          type: string
        status:
          type: string
        priority:
          type: string
        assigned_to:
          type: string
        notes:
          type: string

    ExportDataRequest:
      type: object
      required:
        - action
        - data_type
        - format
      properties:
        action:
          type: string
          enum: [export_data]
        data_type:
          type: string
          enum: [users, cards, transactions, audit_logs]
        format:
          type: string
          enum: [csv, xlsx, json]
        filters:
          type: object

    # Payment Processing Schemas
    MarkInvoicePaidRequest:
      type: object
      required:
        - action
        - invoice_id
        - amount
        - method
      properties:
        action:
          type: string
          enum: [mark_invoice_paid]
        invoice_id:
          type: string
          format: uuid
        amount:
          type: number
          minimum: 0.01
        method:
          type: string
          enum: [mandate, upi_one_time, cash, card, netbanking, wallet, other]
        source:
          type: string
          enum: [gateway, manual, staff, autodebit]
          default: staff
        reference_code:
          type: string
        metadata:
          type: object

    BulkMarkPaymentsRequest:
      type: object
      required:
        - action
        - payments
      properties:
        action:
          type: string
          enum: [bulk_mark_payments]
        payments:
          type: array
          items:
            type: object
            required:
              - invoice_id
              - amount
              - method
            properties:
              invoice_id:
                type: string
                format: uuid
              amount:
                type: number
                minimum: 0.01
              method:
                type: string
                enum: [mandate, upi_one_time, cash, card, netbanking, wallet, other]
              source:
                type: string
                default: staff
              reference_code:
                type: string
              metadata:
                type: object

    PaymentResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        data:
          type: object
          properties:
            payment_id:
              type: string
              format: uuid
        message:
          type: string
          example: "Payment processed successfully"

    BulkPaymentResponse:
      type: object
      properties:
        success:
          type: boolean
        data:
          type: object
          properties:
            successful:
              type: array
              items:
                type: object
                properties:
                  invoice_id:
                    type: string
                    format: uuid
                  payment_id:
                    type: string
                    format: uuid
            failed:
              type: array
              items:
                type: object
                properties:
                  invoice_id:
                    type: string
                    format: uuid
                  error:
                    type: string
            total:
              type: integer
            successCount:
              type: integer
            errorCount:
              type: integer
        message:
          type: string

  responses:
    Unauthorized:
      description: Authentication required
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            success: false
            error: "Unauthorized"

    Forbidden:
      description: Insufficient permissions
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            success: false
            error: "Forbidden - Admin access required"

    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            success: false
            error: "Resource not found"

    BadRequest:
      description: Invalid request data
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            success: false
            error: "Invalid request data"

    Conflict:
      description: Resource conflict
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            success: false
            error: "Resource already exists"

    InternalServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            success: false
            error: "Internal server error"
